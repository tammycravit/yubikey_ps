<#
.SYNOPSIS
Validate a YubiKey OTP password using the web API.

.DESCRIPTION
The YubiKey is a secure two-factor authentication token which works by
generating a cryptographically validateable one-time password at the
touch of a button. This Cmdlet allows you to validate a YubiKey OTP
password in a Powershell script, prompting for the YubiKey password to
be securely entered if need be.

Before using this Cmdlet, you need to obtain an API key for your YubiKey
from <https://upgrade.yubico.com/getapikey/>. The Client ID generated as
part of your API credentials must be passed in as the ClientID parameter
in order to validate your OTP passwords successfully.

The Cmdlet parses the response returned from the YubiKey API service into
a Powershell dictionary, and returns it for further processing.

.PARAMETER ClientID
The ClientID associated with your API credentials.

.PARAMETER OTPKey
The OTP password generated by your YubiKey. The Cmdlet will prompt for this
(in secure input mode) if it's not provided.

.PARAMETER OTPPromptString
The prompt string to use when prompting the user for an OTP password from
the YubiKey.

.PARAMETER YubiAPIEndpoint
The URL for the YubiKey API endpoint to query for validation.

.EXAMPLE
PS> Test-YubiKey -ClientID 1 -OTPKey $key

Validate the YubiKey OTP password in $key against API client ID 1, and
return the results.

.EXAMPLE
PS> Test-YubiKey -ClientID 1 

Validate the YubiKey OTP password entered by the user against API client 
ID 1, and return the results.

.NOTES
If the nonce returned by the Web service does not match the provided nonce,
an additional key (nonce_mismatch) will be added to the output dictionary.

If the OTP key provided by the user is not between 32 and 48 characters in
length, the Cmdlet will still attempt validation with the YubiKey API
service, but an additional key (invalid_otp_length) will be added to the
output dictionary.

Revision History
----------------
2014-07-02     tammycravit@gmail.com     Initial revision
#>
[CmdletBinding(SupportsShouldProcess=$true)]
param
(
	[Parameter(Mandatory=$true)]
	[int] $ClientID,

	[Parameter(Mandatory=$false)]
	[string] $OTPKey = $null,

    [Parameter(Mandatory=$false)]
    [string] $OTPPromptString = "Press the button on your Yubikey",

    [Parameter(Mandatory=$false)]
    [string] $YubiAPIEndpoint = "http://api2.yubico.com/wsapi/2.0/verify"
)

begin
{
    if ($OTPKey.Length -eq 0)
    {
        $k = Read-Host $OTPPromptString -AsSecureString
        $PasswordPointer = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($k)
        $PlainTextPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto($PasswordPointer)
        [Runtime.InteropServices.Marshal]::ZeroFreeBSTR($PasswordPointer)
        $OTPKey = $PlainTextPassword
    }
}

process 
{ 
    $nonce = [guid]::NewGuid().ToString().Replace('-', '')

    $req_uri = "$($YubiAPIEndpoint)?id=$($ClientID)&otp=$($OTPKey)&nonce=$($nonce)"
    $r = Invoke-WebRequest -Uri $req_uri

    $result = @{}

    $lines = $r.Content -split "`n"
    foreach ($l in $lines)
    {
        $toks = $l -split '=', 2
        $key = $toks[0]
        $val = $toks[1]
        $result[$key] = $val
     }

     if ($result.ContainsKey("nonce"))
     {
         if ($nonce.Trim() -ne ($result['nonce']).Trim())
         {
            $result['nonce_mismatch'] = $true
         }
     }

     if ($OTPKey.Length -lt 32 -or $OTPKey.Length -gt 48)
     {
        $result['invalid_otp_length'] = $true
     }

     $result
}

end 
{ 
}